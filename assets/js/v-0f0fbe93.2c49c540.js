(self.webpackChunk=self.webpackChunk||[]).push([[774],{829:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-0f0fbe93",path:"/WebApi/clipboard.html",title:"浏览器操作剪切板（Clipboard API）",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"一、document.execCommand()",slug:"一、document-execcommand",children:[]},{level:3,title:"二、Clipboard API",slug:"二、clipboard-api",children:[]},{level:3,title:"三、copy、cut 和 paste 事件",slug:"三、copy、cut-和-paste-事件",children:[]}],filePathRelative:"WebApi/clipboard.md",git:{updatedTime:1615258143e3,contributors:[]}}},82:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>v});var p=a(133);const t=(0,p.uE)('<h1 id="浏览器操作剪切板-clipboard-api"><a class="header-anchor" href="#浏览器操作剪切板-clipboard-api">#</a> 浏览器操作剪切板（Clipboard API）</h1><p>浏览器操作剪切板有三种方式：</p><ol><li>document.execCommand() （已废弃）</li><li>Clipboard API</li><li>copy、cut 和 paste 事件</li></ol><h3 id="一、document-execcommand"><a class="header-anchor" href="#一、document-execcommand">#</a> 一、document.execCommand()</h3><p>该方法允许运行命令来操纵可编辑内容区域的元素。该方法返回一个布尔值 ，如果是 <code>false</code> 则表示操作不被支持或未被启用。</p><ol><li><p>复制</p><p>选中文本，然后调用<code>document.execCommand(&#39;copy&#39;)</code>，选中的文本就会复制进入剪贴板</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ntext<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">&#39;copy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>剪切</p><p>选中文本，然后调用<code>document.execCommand(&#39;cut&#39;)</code>, 选中的文本就会被剪切进入剪贴板</p></li><li><p>粘贴</p><p>调用<code>document.execCommand(&#39;paste&#39;)</code>，就会将剪贴板里面的内容，输出到当前的焦点元素中</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> output <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#output&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\noutput<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">&#39;paste&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><p><strong>PS: 注意！此功能已过时。 尽管它可能在某些浏览器中仍然可以使用，但不建议使用它，因为可以随时将其删除。 尽量避免使用它。</strong></p><h3 id="二、clipboard-api"><a class="header-anchor" href="#二、clipboard-api">#</a> 二、Clipboard API</h3><p>传统的 document.execCommand() 存在一些缺陷：</p><ol><li>只能将选中的内容复制到剪贴板，无法向剪贴板写入其它内容</li><li>它是同步操作，在数据量大的时候页面可能会出现卡顿</li></ol><p>Clipboard API 是浏览器厂商为了解决上述问题提出了异步解决方案。它的所有操作都是异步的，返回 Promise 对象，不会造成页面卡顿。而且，它可以将任意内容（比如图片）放入剪贴板</p><p>系统剪贴板暴露于全局属性 <code>navigator.clipboard</code> 之中, 如果 <code>navigator.clipboard</code> 属性返回 <code>undefined</code> ，就说明当前浏览器不支持这个 API</p><p>出于安全考虑，这个 API 有如下安全限制：</p>',13),e=(0,p.Wm)("li",null,"Chrome 浏览器规定，只有 HTTPS 协议的页面才能使用这个 API（localhost除外）",-1),o=(0,p.Uk)("如果用户没有适时使用 "),c={href:"https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("Permissions API"),u=(0,p.Uk)(" 授予相应权限和"),i=(0,p.Wm)("code",null,'"clipboard-read"',-1),r=(0,p.Uk)(" 或 "),k=(0,p.Wm)("code",null,'"clipboard-write"',-1),d=(0,p.Uk)(" 权限，调用 "),b=(0,p.Wm)("code",null,"Clipboard",-1),m=(0,p.Uk)(" 对象的方法不会成功"),g=(0,p.uE)('<p>方法：</p><p><strong>read()</strong></p><p>读取剪贴板里面的数据，可以是文本数据，也可以是二进制数据（比如图片）。该方法需要用户明确给予许可。</p><p>该方法返回一个 Promise 对象。一旦该对象的状态变为 resolved，就可以获得一个数组，每个数组成员都是 ClipboardItem 对象的实例。</p><p><strong>readText()</strong></p><p>读取剪贴板里面的文本数据。该方法需要用户明确给予许可。</p><p>该方法返回一个 Promise 对象。一旦该对象的状态变为 resolved，就可以获得剪贴板里面的文本数据。</p><p><strong>write()</strong></p><p>用于将任意数据写入剪贴板，可以是文本数据，也可以是二进制数据。</p><p>该方法接受一个 ClipboardItem 实例作为参数，表示写入剪贴板的数据。</p><p><strong>writeText()</strong></p><p>用于将文本内容写入剪贴板。</p><p>该方法接受一个字符串作为参数，表示写入剪贴板的数据。</p><p>示例：使用 writeText() 和 readText() 对文本数据进行复制粘贴:</p><div class="language-markup ext-html line-numbers-mode"><pre class="language-markup"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn-copy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>copy text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn-paste<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>copy text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">const</span> copyBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#btn-copy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  copyBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>\n    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 将 p 标签内的文本编辑后写入剪切板</span>\n        <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Failed to copy: &#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token boolean">false</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> pasteBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#btn-paste&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  pasteBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>\n    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 读取剪切板中的文本</span>\n        <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Failed to read clipboard content: &#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token boolean">false</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="三、copy、cut-和-paste-事件"><a class="header-anchor" href="#三、copy、cut-和-paste-事件">#</a> 三、copy、cut 和 paste 事件</h3><ol><li><p><strong>copy 事件</strong></p><p>用户向剪贴板放入数据时，将触发<code>copy</code>事件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">&quot;text&quot;</span><span class="token operator">&gt;</span>谁见幽人独往来，飘渺孤鸿影<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n  <span class="token keyword">const</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  text<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;copy&#39;</span><span class="token punctuation">,</span>\n    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 获取用户复制的文本</span>\n      <span class="token keyword">const</span> selectText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>selectText<span class="token punctuation">)</span>\n      <span class="token comment">// 修改用户复制的文本</span>\n      e<span class="token punctuation">.</span>clipboardData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;拣尽寒枝不肯栖，寂寞沙洲冷&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token boolean">false</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>上面示例中的事件对象中有一个 <code>clipboardData</code> 属性，它是一个对象，有如下属性和方法：</p><ul><li><code>Event.clipboardData.setData(type, data)</code>：修改剪贴板数据，需要指定数据类型。</li><li><code>Event.clipboardData.getData(type)</code>：获取剪贴板数据，需要指定数据类型。</li><li><code>Event.clipboardData.clearData([type])</code>：清除剪贴板数据，可以指定数据类型。如果不指定类型，将清除所有类型的数据。</li><li><code>Event.clipboardData.items</code>：一个类似数组的对象，包含了所有剪贴项，不过通常只有一个剪贴项。</li></ul></li><li><p><strong>cut 事件</strong></p><p>用户剪切数据时，将触发<code>cut</code> 事件</p></li><li><p><strong>paste 事件</strong></p><p>用户使用剪贴板数据，进行粘贴操作时，会触发<code>paste</code>事件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;paste&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 拦截粘贴操作 由 Clipboard API 打印剪切板内容</span>\n  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Pasted text: &#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ol>',17),v={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("ol",null,[e,(0,p.Wm)("li",null,[o,(0,p.Wm)("a",c,[l,(0,p.Wm)(a)]),u,i,r,k,d,b,m])]),g],64)}}}}]);