(self.webpackChunk=self.webpackChunk||[]).push([[896],{655:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-6b5589ef",path:"/ECMAScript/data-structures.html",title:"JS 数据类型相关",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"01. typeof 操作符的局限性",slug:"_01-typeof-操作符的局限性",children:[]},{level:2,title:"02. Number 类型的局限性",slug:"_02-number-类型的局限性",children:[]},{level:2,title:"03. 新增的 BigInt 类型",slug:"_03-新增的-bigint-类型",children:[]},{level:2,title:"04. 关于 Symbol 类型",slug:"_04-关于-symbol-类型",children:[]},{level:2,title:"05. String 类型冷知识",slug:"_05-string-类型冷知识",children:[]}],filePathRelative:"ECMAScript/data-structures.md",git:{updatedTime:1615361696e3,contributors:[]}}},753:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>u});var p=a(133);const e=(0,p.Wm)("h1",{id:"js-数据类型相关"},[(0,p.Wm)("a",{class:"header-anchor",href:"#js-数据类型相关"},"#"),(0,p.Uk)(" JS 数据类型相关")],-1),t=(0,p.Uk)("这里主要记录一些对于个人而言比较容易出错的地方以及一些相对较'冷'的知识。关于各个数据类型的 api, 可以在 "),o={href:"https://developer.mozilla.org/zh-CN/",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("MDN"),l=(0,p.Uk)("查询。"),r=(0,p.uE)('<h2 id="_01-typeof-操作符的局限性"><a class="header-anchor" href="#_01-typeof-操作符的局限性">#</a> 01. <code>typeof</code> 操作符的局限性</h2><ul><li>对于 <code>null</code> ，返回 &#39;object&#39;</li><li>对与 JS 的内置对象实例，如 Date 实例或者 RegExp 实例，返回 &#39;object&#39;</li><li>对于函数， 返回 &#39;function&#39;</li></ul><p>所以，下面两个工具函数很实用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> val <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_02-number-类型的局限性"><a class="header-anchor" href="#_02-number-类型的局限性">#</a> 02. Number 类型的局限性</h2><p>Number 类型包括整数和浮点数，取值范围为 <code>-(2^53-1)</code> 到 <code>2^53-1</code>，此外还有几个带符号的值：<code>+Infinity(正无穷)</code>、 <code>-Infinity(负无穷)</code> 和 <code>NaN(非数字)</code>。</p><p>曾经遇到过这样一个场景，后端返回的 JSON 字符串中，id 是数字类型而非字符串。然后悲剧发生了，经过 JSON 的反序列化（JSON.parse）后，得到的 id 值与真实 id 不符。有意思的是，平时在浏览器的 devtool 中查看接口返回的数据，我都是是看 <code>Preview</code> 栏下浏览器给我们格式化好的数据，而非 <code>Response</code> 栏下的原始数据, 这导致了我第一时间没有发现是反序列化出了问题。于是只能去找后端，后端经过 DeBug 后发现数据并没有问题，然后我才终于想起来在 <code>Response</code> 看一眼，果然后端返回的数据是没问题的，问题出在作为 id 的这串数字（后端返回的是 Java 里面的 Long 类型）超出了 JS Number 类型的处理范围，经过 JSON 的反序列化得到了错误的值。最终让后端将其转为字符串后再返回，解决了这个问题。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> number <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740991</span>\n<span class="token number">2</span><span class="token operator">**</span><span class="token number">53</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740992</span>\n<span class="token number">2</span><span class="token operator">**</span><span class="token number">53</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740992</span>\n<span class="token number">2</span><span class="token operator">**</span><span class="token number">53</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740994</span>\n<span class="token number">2</span><span class="token operator">**</span><span class="token number">53</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740996</span>\n<span class="token comment">// 以上结果可知，超出了 Number.MAX_SAFE_INTEGER(即2^53 - 1)后得出的结果已经不精确了。同理，小于 Number.MIN_SAFE_INTEGER 的数字也是如此</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_03-新增的-bigint-类型"><a class="header-anchor" href="#_03-新增的-bigint-类型">#</a> 03. 新增的 BigInt 类型</h2><p>BigInt 是 ES2020 引入的数据类型，可以用任意精度表示整数, 通过在整数末尾附加 n 或调用构造函数来创建。使用 <code>typeof</code> 检测 BigInt 类型返回 &#39;bigint&#39;。目前我还未遇到过该类型的使用场景。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token number">10000n</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> <span class="token keyword">typeof</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12345n, 1000n, &#39;bigint&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_04-关于-symbol-类型"><a class="header-anchor" href="#_04-关于-symbol-类型">#</a> 04. 关于 Symbol 类型</h2><p>Symbol 是 ES2015 引入的数据类型。使用 <code>Symbol()</code> 函数创建一个 Symbol 值（不能使用 <code>new</code> 创建，因为 <code>Symbol()</code> 并不是一个传统的构造函数）。</p><p>每个从 <code>Symbol()</code> 返回的 Symbol 值都是唯一的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>一个 Symbol 值能作为对象属性的标识符，这是该数据类型仅有的目的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>Object.keys()</code> 和 <code>Object.getOwnPropertyNames()</code> 都无法枚举一个对象的 Symbol 值属性，可以使用 <code>Object.getOwnPropertySymbols()</code> 来单独枚举其 Symbol 值属性，或是使用 <code>Reflect.ownKeys()</code> 来枚举该对象上所有的属性</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span>\n  enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  configurable<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nObject<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;foo&#39;]</span>\nObject<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;foo&#39;, b]</span>\nObject<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Symbol(a)]</span>\nReflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;foo&#39;, &#39;b&#39;, Symbol(a)]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_05-string-类型冷知识"><a class="header-anchor" href="#_05-string-类型冷知识">#</a> 05. String 类型冷知识</h2><p>对于长字符串，我们一般使用 &#39;+&#39; 号拼接</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span>\n  <span class="token string">&#39;Before ES modules were available in browsers, &#39;</span> <span class="token operator">+</span>\n  <span class="token string">&#39;developers had no native mechanism for authoring JavaScript &#39;</span> <span class="token operator">+</span>\n  <span class="token string">&#39;in a modularized fashion. &#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>但其实还有另一种比较少见的方式，可以在每行末尾使用反斜杠字符（“\\”），以指示字符串将在下一行继续。但是这种方式确保反斜杠后面没有空格或任何除换行符之外的字符或缩进，否则反斜杠将不会工作。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> str2 <span class="token operator">=</span>\n  <span class="token string">&#39;Before ES modules were available in browsers, \\\ndevelopers had no native mechanism for authoring JavaScript \\\nin a modularized fashion. &#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>以上两种方式创建的字符串相同</p>',25),u={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("p",null,[t,(0,p.Wm)("a",o,[c,(0,p.Wm)(a)]),l]),r],64)}}}}]);